Index: chipmunk_types.h
===================================================================
--- chipmunk_types.h	(revision 1598)
+++ chipmunk_types.h	(working copy)
@@ -1,4 +1,5 @@
-#if 1 // use doubles by default for higher precision
+// in cocos2d use floats instead of doubles
+#if 0 // use doubles by default for higher precision
 
 typedef double cpFloat;
 #define cpfsqrt sqrt
Index: cpSpaceHash.c
===================================================================
--- cpSpaceHash.c	(revision 1598)
+++ cpSpaceHash.c	(working copy)
@@ -501,7 +501,7 @@
 	a = cpvmult(a, 1.0f/hash->celldim);
 	b = cpvmult(b, 1.0f/hash->celldim);
 	
-	cpFloat dt_dx = 1.0f/fabs(b.x - a.x), dt_dy = 1.0f/fabs(b.y - a.y);
+	cpFloat dt_dx = 1.0f/cpfabs(b.x - a.x), dt_dy = 1.0f/cpfabs(b.y - a.y);
 	
 	int cell_x = floor_int(a.x), cell_y = floor_int(a.y);
 
Index: constraints/cpConstraint.c
===================================================================
--- constraints/cpConstraint.c	(revision 1598)
+++ constraints/cpConstraint.c	(working copy)
@@ -56,7 +56,7 @@
 	constraint->a = a;
 	constraint->b = b;
 	
-	constraint->maxForce = INFINITY;
+	constraint->maxForce = (cpFloat)INFINITY;
 	constraint->biasCoef = cp_constraint_bias_coef;
-	constraint->maxBias = INFINITY;
+	constraint->maxBias = (cpFloat)INFINITY;
 }
Index: constraints/cpPinJoint.c
===================================================================
--- constraints/cpPinJoint.c	(revision 1598)
+++ constraints/cpPinJoint.c	(working copy)
@@ -36,7 +36,7 @@
 	
 	cpVect delta = cpvsub(cpvadd(b->p, joint->r2), cpvadd(a->p, joint->r1));
 	cpFloat dist = cpvlength(delta);
-	joint->n = cpvmult(delta, 1.0f/(dist ? dist : INFINITY));
+	joint->n = cpvmult(delta, 1.0f/(dist ? dist : (cpFloat)INFINITY));
 	
 	// calculate mass normal
 	joint->nMass = 1.0f/k_scalar(a, b, joint->r1, joint->r2, joint->n);
Index: constraints/cpSlideJoint.c
===================================================================
--- constraints/cpSlideJoint.c	(revision 1598)
+++ constraints/cpSlideJoint.c	(working copy)
@@ -42,7 +42,7 @@
 		pdist = joint->min - dist;
 		dist = -dist;
 	}
-	joint->n = cpvmult(delta, 1.0f/(dist ? dist : INFINITY));
+	joint->n = cpvmult(delta, 1.0f/(dist ? dist : (cpFloat)INFINITY));
 	
 	// calculate mass normal
 	joint->nMass = 1.0f/k_scalar(a, b, joint->r1, joint->r2, joint->n);
Index: cpVect.h
===================================================================
--- cpVect.h	(revision 1598)
+++ cpVect.h	(working copy)
@@ -18,10 +18,15 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  */
- 
+
+#ifdef __IPHONE_2_0
+#import <CoreGraphics/CGGeometry.h>
+#define cpVect CGPoint
+#else
 typedef struct cpVect{
 	cpFloat x,y;
 } cpVect;
+#endif
 
 static const cpVect cpvzero={0.0f,0.0f};
 
